#!/usr/bin/env python3
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License
#

#
# Open a large number of simultaineous TCP connections then
# tear them down
#

import resource
import socket
import sys

from time import sleep

def main(argv):
    # tcp_conn_scale [max-conns [host-address [client-port [server-port]]]]

    max_conns = int(argv[1]) if len(argv) > 1 else 1000
    router_addr = argv[2] if len(argv) > 2 else "127.0.0.1"
    client_port = int(argv[3]) if len(argv) > 3 else 8000
    server_port = int(argv[4]) if len(argv) > 4 else 8800

    server_socks = []
    client_socks = []

    slimit = resource.getrlimit(resource.RLIMIT_NOFILE)[0]
    if slimit < ((2 * max_conns) + 100):
        print(f"Error max open sockets set to {slimit} - too low!")
        print(f"Must be at least 2 x {max_conns}", flush=True)
        return 1

    try:

        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as listener:
            listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            listener.bind(("0.0.0.0", server_port))
            listener.setblocking(True)
            listener.listen(4096)

            print(f"Creating {max_conns} connections...", flush=True)

            for index in range(max_conns):

                client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                client.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
                client.setblocking(True)
                while True:
                    try:
                        client.connect((router_addr, client_port))
                        break
                    except ConnectionRefusedError:
                        print("Client conn refused... retrying")
                        sleep(1)

                client_socks.append(client)

                server, _ = listener.accept()
                server_socks.append(server)

            print(f"{max_conns} connections opened", flush=True)
            sleep(1)
            print("Closing connections", flush=True)

    except KeyboardInterrupt:
        print("Done")
        return 0

    finally:
        for client in client_socks:
            client.shutdown(socket.SHUT_WR)  # half-close
            client.close()
        for server in server_socks:
            server.shutdown(socket.SHUT_RDWR)
            server.close()

    print("Done", flush=True)


if __name__ == "__main__":
    sys.exit(main(sys.argv))

