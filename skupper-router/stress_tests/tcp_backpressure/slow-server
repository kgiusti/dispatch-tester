#!/usr/bin/env python3
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License
#

#
# Slow consuming HTTP server
#

import socket
import sys
from threading import Thread
from time import sleep

def readline(conn):
    data = b''
    while True:
        octet = conn.recv(1)
        if octet == b'':
            return data
        data += octet
        if octet == b'\n':
            return data

def handle_requests(conn, delay):
    # print("Handle request")

    conn.setblocking(True)

    while True:
        # print("Getting client request...")

        # drain the request headers
        content_length = 0
        while True:
            # read all the headers
            line = readline(conn)
            if line == b'':
                # remote closed the socket
                conn.close()
                # print("Connection closed")
                return
            if line == b'\r\n':
                break
            line = line.decode().lower().strip()
            # print(f"Received header {line}")
            if line.startswith("content-length:"):
                content_length = int(line.split(':')[1])
                # print(f"CONTENT_LEN={content_length}")

        # print("Reading client body")
        # drain the body (if it exists)
        while content_length > 0:
            data = conn.recv(content_length)
            # print(f"Received {data.decode()}")
            if data == b'':
                # remote closed the socket
                conn.close()
                # print("Connection closed")
                return
            content_length -= len(data)

        sleep(delay)
        # print("Send response")
        conn.sendall(b"HTTP/1.1 404 Not Found\r\n")
        conn.sendall(b"content-length: 0\r\n\r\n")

def main(argv):
    if len(argv) < 3 or len(argv) > 4:
        print(f"Usage: {argv[0]} host port [delay]")
        return 1
    delay = 0.1
    if len(argv) == 4:
        delay = float(argv[3])

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as listener:
        listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        listener.bind((argv[1], int(argv[2])))
        listener.setblocking(True)
        listener.listen(100)

        try:
            while True:
                conn, _ = listener.accept()
                _thread = Thread(target=handle_requests, args=(conn, delay),
                                 daemon=True)
                _thread.start()
        except KeyboardInterrupt:
            print("Done")
            return 0

if __name__ == "__main__":
    sys.exit(main(sys.argv))
