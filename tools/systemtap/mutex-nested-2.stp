//!/usr/bin/stap
//
// Graciously "borrowed" from Alan Conway.
//
// This script identifies codepaths that take more than one lock
// Run with -x and -d for a particular process, e.g. for qdrouterd:
//
// sudo stap ~/work/dispatch/dispatch-tester/systemtap/mutex-nested.stp  -x $(pidof qdrouterd) -d /home/kgiusti/work/dispatch/qpid-dispatch/BUILD/src/libqpid-dispatch.so -d /usr/lib64/libpython2.7.so.1.0 -d kernel -d /home/kgiusti/work/dispatch/qpid-dispatch/BUILD/router/qdrouterd -d /opt/kgiusti/lib64/libqpid-proton-proactor.so.1.4.0 -d /opt/kgiusti/lib64/libqpid-proton-core.so.10.7.0 -DMAXSTRINGLEN=4096 -DMAXMAPENTRIES=100000 -s 1000 -v -g --suppress-time-limits
//
// When the script is killed (Ctrl-C or kill -int) it prints stack traces where more than one lock is held by a thread.
// Note: if the stack traces are cut off you may need to increase the value of -DMAXSTRINGLEN above.
//
// Filter the output with c++filt to get readable C++ function names.
//
// NOTE: You'll need to install debuginfo for the pthread libraries, e.g. on RHEL/Fedora:
//     sudo debuginfo-install glibc
//
// TODO:
//
// The trace gives an address, function and library. Would be nice to
// convert the address into a file:line to precisely identify the
// lock statement. addr2line should be able to do this but haven't figured it
// out yet.
//

global thread_stacks  // track the threads current stack frame
global thread_locks   // how many locks are held
global stacks         // all nested mutex stacks

probe process("/lib64/libpthread.so.0").function("pthread_mutex_lock").return {
  if (target() != pid()) next;

  t = tid()
  thread_stacks[t, thread_locks[t]] = sprint_ubacktrace()
  thread_locks[t]++
  if (thread_locks[t] > 1)
    {
     index = ""
     count = thread_locks[t] - 1
     while (count >= 0)
       {
        index = sprintf("%s%d:\n%s\n", index, count, thread_stacks[t, count])
        count--
       }
     stacks[index]++
    }
}

probe process("/lib64/libpthread.so.0").function("pthread_mutex_unlock") {
  if (target() != pid()) next;

  t = tid()
  if (thread_locks[t] == 0) next
  thread_locks[t]--
  delete thread_stacks[t, thread_locks[t]]
}

probe end {
  printf("\n\n **************\n")
  printf(" nested mutexes\n")
  printf(" **************\n\n")

  foreach ([s] in stacks-) {
    printf("%s\n\n", s)
  }
}
